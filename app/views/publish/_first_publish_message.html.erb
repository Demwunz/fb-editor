<p id="first-publish-alert-<%=environment %>" role="alert"
                            class="text-error"
                            data-default-message="<%= t('publish.first_publish_warning') %>"
                            data-success-message="<%= t('publish.first_publish_success') %>"
                            data-success-class="text-success"
                            data-error-class="text-error">

</p>

<script type="module">
  const alert = document.querySelector("#first-publish-alert-<%=environment%>");
  const successClass = alert.dataset.successClass;
  const errorClass = alert.dataset.errorClass;
  const defaultMessage = alert.dataset.defaultMessage;
  const successMessage = alert.dataset.successMessage;
  const endpoint = '<%= api_service_first_publish_path(service_id, environment) %>';

  const livenessChecksRequired = 3
  const publishedCheckSuccessesRequired = 10

  async function checkLiveness() {
    return fetch(endpoint).then((response) => {
      console.log('checking liveness');
      return response.ok ? true : false;
    }).catch((error) => {
      console.log('error');
    });
  }

  let results = [];
  for(let i=0;i<livenessChecksRequired;i++) {
    const result = await checkLiveness();
    results.push(result);
  }

  const alreadyLive = results.reduce((value, result) => value && result);
  console.log(alreadyLive)
  if(!alreadyLive) {
    console.log('not already live');
    alert.textContent = defaultMessage;
    let successCount = 0;
    let publishedCheck = setInterval( async function() {
      const success = await checkLiveness();
      console.log({success});
      successCount = success ? successCount+1 : 0;
      console.log({successCount});
      if(successCount >= publishedCheckSuccessesRequired) {
        console.log('successful enough to be considered live');
        alert.classList.replace(errorClass,successClass);
        alert.textContent = successMessage;
        clearInterval(publishedCheck);
      }
    }, 10000);
  }
</script>
