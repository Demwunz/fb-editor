<p id="first-publish-alert-<%=environment %>" role="alert"
                            class="text-error"
                            data-default-message="<%= t('publish.first_publish_warning') %>"
                            data-success-message="<%= t('publish.first_publish_success') %>"
                            data-success-class="text-success">

</p>

<script>
  $(function() {
    /* setTimeout is used here as if the default message is in the aria-live container
     * on page load then it won't be announced.  Adding a delay before inserting the message
     * allows it to be picked up and announced
     */
    setTimeout(function() {
      var $alert = $("#first-publish-alert-<%=environment%>");
      var successClass = $alert.data('success-class');
      var successMessage = $alert.data('success-message');
      var defaultMessage =  $alert.data('default-message');

        // Check if the service is live
        $.get('<%= api_service_first_publish_path(service_id, environment) %>', function() {
          // Already published
        }).fail(function() {
          // Show default message
          $alert.text(defaultMessage);

          <% if Rails.env.production? %>
            // Start polling for when service is live
            var status = setInterval( function() {
              $.get('<%= api_service_first_publish_path(service_id, environment) %>', function() {
                $alert.removeClass().addClass(successClass).text(successMessage);
                clearInterval(status);
              })
            }, 10000);
          <% end %>
        });
    }, 100);
  })
</script>
